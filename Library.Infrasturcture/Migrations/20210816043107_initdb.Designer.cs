// <auto-generated />
using System;
using Library.Infrasturcture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Infrasturcture.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20210816043107_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1962, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Дэвид Фостер"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1818, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Иван Сергеевич Тургенев"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.AuthorBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Author_Book_");
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TakeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReaderId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Book_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhotoPath = "infjoke.jpg",
                            ReaderId = 1,
                            ShelfId = 1,
                            TakeDate = new DateTime(2021, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Бесконечная шутка"
                        },
                        new
                        {
                            Id = 2,
                            PhotoPath = "mymy.jpg",
                            ReaderId = 2,
                            ShelfId = 1,
                            TakeDate = new DateTime(2021, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Муму"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book_Category_");
                });

            modelBuilder.Entity("Library.Domain.Models.BookTag", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Book_Tag_");
                });

            modelBuilder.Entity("Library.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Фантастика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Фэнтези"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Приключения"
                        },
                        new
                        {
                            Id = 5,
                            Name = "История"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reader_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1996, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Иванов Иван Иванович",
                            RegistrationDate = new DateTime(2021, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Квашнин Петр Михайлович",
                            RegistrationDate = new DateTime(2021, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2001, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Петрухин Александр Андреевич",
                            RegistrationDate = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shelf_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag_");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "#war"
                        },
                        new
                        {
                            Id = 2,
                            Name = "#love"
                        },
                        new
                        {
                            Id = 3,
                            Name = "#KILLA"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.AuthorBook", b =>
                {
                    b.HasOne("Library.Domain.Models.Author", "AuthorsObj")
                        .WithMany("AuthorBookObj")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.Book", "BooksObj")
                        .WithMany("AuthorBookObj")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorsObj");

                    b.Navigation("BooksObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.HasOne("Library.Domain.Models.Reader", "ReaderObj")
                        .WithMany("BookObj")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.Shelf", "ShelfObj")
                        .WithMany("BookObj")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReaderObj");

                    b.Navigation("ShelfObj");
                });

            modelBuilder.Entity("Library.Domain.Models.BookCategory", b =>
                {
                    b.HasOne("Library.Domain.Models.Book", "BookObj")
                        .WithMany("BookCategoryObj")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.Category", "CategoryObj")
                        .WithMany("BookCategoryObj")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookObj");

                    b.Navigation("CategoryObj");
                });

            modelBuilder.Entity("Library.Domain.Models.BookTag", b =>
                {
                    b.HasOne("Library.Domain.Models.Book", "BookObj")
                        .WithMany("BookTagObj")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.Tag", "TagObj")
                        .WithMany("BookTagObj")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookObj");

                    b.Navigation("TagObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Author", b =>
                {
                    b.Navigation("AuthorBookObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Navigation("AuthorBookObj");

                    b.Navigation("BookCategoryObj");

                    b.Navigation("BookTagObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Category", b =>
                {
                    b.Navigation("BookCategoryObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Reader", b =>
                {
                    b.Navigation("BookObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Shelf", b =>
                {
                    b.Navigation("BookObj");
                });

            modelBuilder.Entity("Library.Domain.Models.Tag", b =>
                {
                    b.Navigation("BookTagObj");
                });
#pragma warning restore 612, 618
        }
    }
}
